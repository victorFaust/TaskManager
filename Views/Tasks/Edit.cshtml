@using TaskManager.Models.Enum
@model TaskManager.Models.Dtos.EditTaskDto

@{
    ViewData["Title"] = "Edit Task";
}

<h2 class="mb-3"><i class="bi bi-pencil"></i> Edit Task</h2>

<form id="editForm" asp-action="Edit" method="post" class="card p-4 shadow-sm" novalidate>
    <input type="hidden" asp-for="Id" />
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group mb-3">
        <label asp-for="Title" class="form-label"><i class="bi bi-textarea"></i> Title</label>
        <input asp-for="Title" class="form-control" required maxlength="100" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="Description" class="form-label"><i class="bi bi-file-text"></i> Description</label>
        <textarea asp-for="Description" class="form-control" maxlength="500"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="DueDate" class="form-label"><i class="bi bi-calendar"></i> Due Date</label>
        <div class="input-group" id="dueDatePicker">
            <input asp-for="DueDate" class="form-control" id="dueDateInput" required />
            <span class="input-group-text" id="dueDateToggle">
                <i class="bi bi-calendar-event"></i>
            </span>
        </div>
        <span asp-validation-for="DueDate" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="Priority" class="form-label"><i class="bi bi-exclamation-circle"></i> Priority</label>
        <select asp-for="Priority" class="form-select" required asp-items="Html.GetEnumSelectList<PriorityLevel>()"></select>
        <span asp-validation-for="Priority" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="IsCompleted" class="form-label"><i class="bi bi-check-circle"></i> Completed</label>
        <input asp-for="IsCompleted" type="checkbox" class="form-check-input" />
        <span asp-validation-for="IsCompleted" class="text-danger"></span>
    </div>

    <div class="d-flex gap-2">
        <button type="submit" id="saveBtn" class="btn btn-success"><i class="bi bi-save"></i> Save <span class="spinner-border spinner-border-sm d-none" role="status"></span></button>
        <a asp-action="Index" class="btn btn-secondary"><i class="bi bi-x-circle"></i> Cancel</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const picker = new tempusDominus.TempusDominus(document.getElementById('dueDatePicker'), {
                display: { components: { clock: true, hours: true, minutes: true }, theme: 'dark', viewMode: 'calendar' },
                restrictions: { minDate: moment().startOf('day').toDate() },
                localization: { format: 'yyyy-MM-dd HH:mm' }
            });

            picker.subscribe(tempusDominus.Namespace.events.change, function (e) {
                document.getElementById('dueDateInput').value = moment(e.date).format('YYYY-MM-DD HH:mm');
            });

            const initialValue = '@Model?.DueDate.ToString("yyyy-MM-dd HH:mm")';
            if (initialValue) {
                document.getElementById('dueDateInput').value = initialValue;
                picker.dates.setValue(moment(initialValue, 'YYYY-MM-DD HH:mm').toDate());
            }
        });

        document.getElementById('editForm').addEventListener('submit', function (e) {
            e.preventDefault();
            if (!this.checkValidity()) {
                e.stopPropagation();
                this.classList.add('was-validated');
                return;
            }

            const btn = document.getElementById('saveBtn');
            const spinner = btn.querySelector('.spinner-border');
            btn.disabled = true;
            spinner.classList.remove('d-none');

            fetch(this.action, {
                method: 'POST',
                body: new FormData(this),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(response => response.json())
            .then(data => {
                btn.disabled = false;
                spinner.classList.add('d-none');
                if (data.success) {
                    Swal.fire('Success', data.message, 'success').then(() => window.location.href = '/Tasks');
                } else {
                    let errorMessage = data.message;
                    if (data.errors) errorMessage += '<ul>' + data.errors.map(e => `<li>${e}</li>`).join('') + '</ul>';
                    Swal.fire({ title: 'Error', html: errorMessage, icon: 'error' });
                }
            });
        });
    </script>
}