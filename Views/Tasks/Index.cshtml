@using TaskManager.Models.Enum
@model IEnumerable<TaskManager.Models.MyTasks>

@{
    ViewData["Title"] = "Task List";
}

<h2 class="mb-3"><i class="bi bi-list-task"></i> Task List</h2>

<p>
    <a asp-action="Create" class="btn btn-success"><i class="bi bi-plus-circle"></i> Add New Task</a>
</p>

<table id="tasksTable" class="table table-striped table-bordered" style="width:100%">
    <thead class="table-dark">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Priority</th>
            <th>Completed</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model)
        {
            <tr>
                <td>@task.Title</td>
                <td>@task.Description</td>
                <td>@task.DueDate.ToString("MMM dd, yyyy HH:mm")</td>
                <td>
                    <span class="badge @(task.Priority == PriorityLevel.High ? "bg-danger" : task.Priority == PriorityLevel.Medium ? "bg-warning" : "bg-info")">
                        @task.Priority
                    </span>
                </td>
                <td>
                    <form class="toggle-form" method="post" asp-action="ToggleComplete">
                        <input type="hidden" name="id" value="@task.Id" />
                        <input type="checkbox" @(task.IsCompleted ? "checked" : "") onchange="toggleComplete(this)" class="form-check-input" />
                        <i class="bi @(task.IsCompleted ? "bi-check-circle-fill text-success" : "bi-circle")"></i>
                    </form>
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil"></i> Edit</a>
                    <button class="btn btn-sm btn-danger delete-btn" data-id="@task.Id"><i class="bi bi-trash"></i> Delete <span class="spinner-border spinner-border-sm d-none" role="status"></span></button>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function () {
            $('#tasksTable').DataTable({ "order": [[3, "asc"]] });
        });

        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', function () {
                const taskId = this.getAttribute('data-id');
                const spinner = this.querySelector('.spinner-border');
                this.disabled = true;
                spinner.classList.remove('d-none');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/Tasks/Delete/' + taskId, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        })
                        .then(response => response.json())
                        .then(data => {
                            this.disabled = false;
                            spinner.classList.add('d-none');
                            if (data.success) {
                                Swal.fire('Deleted!', data.message, 'success').then(() => location.reload());
                            } else {
                                Swal.fire('Error', data.message, 'error');
                            }
                        });
                    } else {
                        this.disabled = false;
                        spinner.classList.add('d-none');
                    }
                });
            });
        });

        function toggleComplete(checkbox) {
            const form = checkbox.closest('form');
            checkbox.disabled = true;

            fetch(form.action, {
                method: 'POST',
                body: new FormData(form),
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(response => response.json())
            .then(data => {
                checkbox.disabled = false;
                if (data.success) {
                    Swal.fire('Success', data.message, 'success').then(() => location.reload());
                } else {
                    Swal.fire('Error', data.message, 'error');
                    checkbox.checked = !checkbox.checked;
                }
            });
        }
    </script>
}